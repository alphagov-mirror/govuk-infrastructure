---
definitions:

resources:
  - icon: github
    name: govuk-infrastructure
    source:
      branch: main
      uri: https://github.com/alphagov/govuk-infrastructure
    type: git

groups:
  - name: all
    jobs:
      - update-pipeline
      - deploy-monitoring-infra
      - deploy-grafana
      - configure-grafana

  - name: terraform
    jobs:
      - deploy-monitoring-infra

  - name: admin
    jobs:
      - update-pipeline

  - name: deploy-grafana
    jobs:
      - deploy-grafana

  - name: configure-grafana
    jobs:
      - configure-grafana

jobs:
  - name: update-pipeline
    plan:
    - get: govuk-infrastructure
      trigger: true
    - file: govuk-infrastructure/concourse/pipelines/monitoring.yml
      set_pipeline: monitoring

  - name: deploy-monitoring-infra
    plan:
    - get: govuk-infrastructure
      trigger: true
    - task: terraform-apply
      config:
        inputs:
        - name: govuk-infrastructure
        params:
          AWS_REGION: eu-west-1
          ASSUME_ROLE_ARN: 'arn:aws:iam::430354129336:role/govuk-concourse-deployer'
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/terraform
            tag: terraform-0.13.3
            username: ((docker_hub_username))
            password: ((docker_hub_authtoken))
        run:
          dir: govuk-infrastructure/terraform/deployments/monitoring-test/infra
          path: sh
          args:
          - '-c'
          - |
            set -eu

            terraform init -backend-config "role_arn=$ASSUME_ROLE_ARN"
            terraform apply \
              -var "assume_role_arn=$ASSUME_ROLE_ARN" \
              -var-file ../../variables/test/common.tfvars \
              -var-file ../../variables/test/infrastructure.tfvars \
              -auto-approve

  - name: deploy-grafana
    plan:
    - get: govuk-infrastructure
      passed:
      - deploy-monitoring-infra
      trigger: true
    - task: update-grafana-task-definition
      config:
        inputs:
        - name: govuk-infrastructure
          path: src
        outputs:
        - name: terraform-outputs
        params:
          AWS_REGION: eu-west-1
          ASSUME_ROLE_ARN: 'arn:aws:iam::430354129336:role/govuk-concourse-deployer'
          GOVUK_ENVIRONMENT: test
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/terraform
            tag: terraform-0.13.3
            username: ((docker_hub_username))
            password: ((docker_hub_authtoken))
        run:
          path: sh
          args:
          - '-c'
          - |
            set -eu

            root_dir=$(pwd)


            APP_DIR="src/terraform/deployments/monitoring-test/grafana"
            cd ${APP_DIR}

            terraform init -backend-config="role_arn=$ASSUME_ROLE_ARN"

            terraform apply \
            -var "assume_role_arn=$ASSUME_ROLE_ARN" \
            -auto-approve

            terraform output task_definition_arn > "$root_dir/terraform-outputs/grafana_task_definition_arn"

    - task: update-grafana-service
      config:
        inputs:
        - name: terraform-outputs
        params:
          APPLICATION: grafana
          AWS_REGION: eu-west-1
          ASSUME_ROLE_ARN: 'arn:aws:iam::430354129336:role/govuk-concourse-deployer'
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/awscli
            tag: latest
            username: ((docker_hub_username))
            password: ((docker_hub_authtoken))
        run:
          path: sh
          args:
          - '-c'
          - |
            set -eu

            mkdir -p ~/.aws

            cat <<EOF > ~/.aws/config
            [profile default]
            role_arn = $ASSUME_ROLE_ARN
            credential_source = Ec2InstanceMetadata
            EOF

            current_task_definition_arn="$(aws ecs describe-services --services "$APPLICATION" --cluster monitoring --region "$AWS_REGION" | jq -r '.services[0].taskDefinition')"
            if [ -z "${current_task_definition_arn}" ]; then
              echo "failed to retrieve current task definition for ${APPLICATION}, exiting..."
              exit 1
            fi

            new_task_definition_arn="$(cat "terraform-outputs/${APPLICATION}_task_definition_arn")"
            if [ -z "${new_task_definition_arn}" ]; then
              echo "failed to retrieve new task definition for ${APPLICATION}, exiting..."
              exit 1
            fi

            # This conditional is used to skip `aws ecs update-service` below since its outputs may confuse readers and
            # lead them to believe that `aws ecs update-service` is not idempotent
            if [ "${current_task_definition_arn}" = "${new_task_definition_arn}" ]; then
              echo "No need to update ${APPLICATION} service since its task definition was not updated"
              exit 0
            fi

            echo "Updating $APPLICATION service..."


            aws ecs update-service \
              --cluster monitoring \
              --service "$APPLICATION" \
              --task-definition "$new_task_definition_arn" \
              --region "$AWS_REGION"

            echo "Waiting for $APPLICATION ECS service to reach steady state..."

            aws ecs wait services-stable \
              --cluster monitoring \
              --services "$APPLICATION" \
              --region "$AWS_REGION"

            echo "Finished updating $APPLICATION to task definition $new_task_definition_arn."

  - name: configure-grafana
    plan:
    - get: govuk-infrastructure
      passed:
      - deploy-grafana
      trigger: true
    - task: terraform-apply
      config:
        inputs:
        - name: govuk-infrastructure
          path: src
        outputs:
        - name: terraform-outputs
        params:
          AWS_REGION: eu-west-1
          ASSUME_ROLE_ARN: 'arn:aws:iam::430354129336:role/govuk-concourse-deployer'
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: governmentpaas/terraform
            tag: terraform-0.13.3
            username: ((docker_hub_username))
            password: ((docker_hub_authtoken))
        run:
          path: sh
          args:
          - '-c'
          - |
            set -eu

            root_dir=$(pwd)
            echo "${root_dir}"

            INFRA_DIR="${root_dir}/src/terraform/deployments/monitoring-test/infra"
            cd ${INFRA_DIR}
            terraform init -backend-config "role_arn=$ASSUME_ROLE_ARN"
            grafana_fqdn=$(terraform output grafana_fqdn)
            echo "Grafana base URL: https://${grafana_fqdn}"

            wait_url() {
              max_retries=10
              retries_count=0
              sleep_period=5

              while true ; do
                  echo "checking if HTTP status code $1 is 200..."
                  if wget --timeout 2 --server-response $1 2>&1 >/dev/null | awk '/^  HTTP/{print $2}' | grep -q "200" ; then
                    echo "HTTP status code for $1 is 200"
                    return
                  fi

                  retries_count=$((retries_count+1))

                  if [ $retries_count -ge $max_retries ]; then
                    echo "final HTTP code is not 200 for $1"
                    exit 1
                  fi

                  sleep_duration=$((retries_count * sleep_period))
                  echo "HTTP code is not 200, sleeping for ${sleep_duration}s before new check..."
                  sleep ${sleep_duration}
              done;
            }

            wait_url https://${grafana_fqdn}

            APP_DIR="${root_dir}/src/terraform/deployments/monitoring-test/grafana/app-config"
            cd ${APP_DIR}

            terraform_apply() {
              # sed is used here to filter out the ansi colors in the text stream
              terraform apply -var "assume_role_arn=$ASSUME_ROLE_ARN" -auto-approve 2>&1 \
                | sed 's/\x1b\[[0-9;]*m//g' \
                | tee $root_dir/terraform-outputs/grafana_config_terraform_results
            }

            terraform init -backend-config "role_arn=$ASSUME_ROLE_ARN" -reconfigure
            (terraform_apply) || true

            # See bug https://github.com/grafana/terraform-provider-grafana/issues/129
            # where terraform does not recreate some grafana resources if not found
            if grep -q 'Error: status: 404, body: {"message":"Data source not found"}' "${root_dir}/terraform-outputs/grafana_config_terraform_results"; then

              echo "fixing terraform state bug by removing state"
              terraform state rm module.grafana-app-config.grafana_data_source.cloudwatch

              echo "applying terraform again"
              terraform_apply

            elif grep -q "Error: " $root_dir/terraform-outputs/grafana_config_terraform_results; then
               echo "an error has occurred during terraform apply to configure grafana"
               exit 1
            fi
